#!/bin/bash -e

# TODO:
# - current: show current environment & settings
# - also setup docker-compose alias
# - auto-matically verify connection & setup docker client version when setting up the environment
# - bash completion

CONFIG_PATH=~/.docker-env
DOCKER_BIN_PATH=~/bin

function help {
  echo "Usage:"
  echo "   * Setup environment:      eval \$(docker-env <env_name>)"
  echo "   * Reset environment:      eval \$(docker-env [--reset])"
  echo "   * List environments:      docker-env --list"
  echo "   * Add environment:        docker-env --add <env_name> [--cacert <CA cert>] [--tlscert <tls cert>] [--tlskey <tls key>] [--version <docker version>] [<docker_address>]"
  echo "   * Update docker client:   docker-env --update <env_name> [--version <docker version>]"
  echo "   * Delete environment      docker-env --rm <env_name>"
  echo "   * Run docker command:     docker-env <env_name> <docker_command> <docker_command_args...>"
  exit 1
}

# Usage
#   $1: environment name
function verify_environment {
  if [ ! -d $CONFIG_PATH/$1 ]; then
	echo "Docker environment '$1' not found" >&2
	exit 1
  fi
}

function get_env_version {
  $(DOCKER_CMD) -f {{.Server.Version}}
}

# Usage
#   $1: environment name
function setup {
  local HOST=$1

  if [ ! -d $CONFIG_PATH/$HOST ]; then
	echo "Docker environment '$HOST' not found" >&2
	exit 1
  fi

  # Setup docker host
  if [ -e $CONFIG_PATH/$HOST/DOCKER_HOST ]; then
	DOCKER_HOST=$(cat $CONFIG_PATH/$HOST/DOCKER_HOST) 
  else
	DOCKER_HOST=$HOST:2376
  fi

  # Setup TLS
  if [ -e $CONFIG_PATH/$HOST/key.pem ]; then
    DOCKER_TLS_VERIFY=1
	DOCKER_CERT_PATH=$CONFIG_PATH/$HOST
  else
    DOCKER_TLS_VERIFY=
	DOCKER_CERT_PATH=
  fi
  
  # Setup appropriate docker version
  if [ -x $CONFIG_PATH/$HOST/docker ]; then
    DOCKER_CMD=$CONFIG_PATH/$HOST/docker
  else
    DOCKER_CMD=$(which docker)
  fi
  
  echo export DOCKER_MACHINE_NAME=$HOST \;
  echo export DOCKER_HOST=$DOCKER_HOST \;
  echo export DOCKER_TLS_VERIFY=$DOCKER_TLS_VERIFY \;
  echo export DOCKER_CERT_PATH=$DOCKER_CERT_PATH \;
  echo alias docker=$DOCKER_CMD \;
  echo echo "Docker environment setup for $DOCKER_HOST."
}

function clear_env {
  echo unset DOCKER_MACHINE_NAME \;
  echo unset DOCKER_HOST \;
  echo unset DOCKER_TLS_VERIFY \;
  echo unset DOCKER_CERT_PATH \;
  echo unalias docker \;
  echo echo "Docker environment cleared."
}

function run_docker {
  eval $(setup $1)
  shift
  exec docker "$*" 
}

function list_envs {
  cd ~/.docker-env
  for env in *; do
    echo $env
  done
}

function version { 
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; 
}

# Usage
#   $1: path
#   $2: version
function download_client {
  local install_path=$1
  local version=$2

  # Find out if already installed
  local docker_binary=$(which docker-$version)
  if [ -z $docker_binary ]; then
    docker_binary=$DOCKER_BIN_PATH/docker-$version
  fi

  # If not, download to ~/bin
  if [ ! -x $docker_binary ]; then
    local URL="https://get.docker.com/builds/$(uname -s)/$(uname -m)/docker-$version"	
	if [ $(version $version) -lt $(version 1.11) ] ; then
      curl -q $URL -o $docker_binary
	  chmod +x $docker_binary
    else
      curl -q ${URL}.tgz | tar xz --strip-components=1 docker/docker -O > $docker_binary
	  chmod +x $docker_binary
    fi
  fi

  # And create link to binary
  rm -f $install_path
  ln -s $docker_binary $install_path
}

# Usage
#   $1: environment name
function add_env {
  local ENV_NAME=
  local TLSCERT=
  local TLSKEY=
  local CACERT=
  local DOCKER_HOST=
  local VERSION=
  local argsCount=0
  while [[ $# > 0 ]]; do
    case $1 in
    --tlscert)
	  shift
	  TLSCERT=$1
	  ;;

	--tlskey)
	  shift
	  TLSKEY=$1
	  ;;

	--cacert)
	  shift
	  CACERT=$1
	  ;;

    --version|-v)
	  shift
	  VERSION=$1
	  ;;

    *)
	  if [ $argsCount == 0 ]; then
	    ENV_NAME=$1
	    argsCount=1
	  elif [ $argsCount == 1 ]; then
	    DOCKER_HOST=$1
	    argsCount=2
	  else
        echo "Invalid option $1" >&2
        help
   	  fi
      ;;
    esac
    shift # past argument or value
  done
  
  if [ -z $ENV_NAME ]; then
    echo "Environment name not specified" >&2
    help
  fi
  
  mkdir -p $CONFIG_PATH/$ENV_NAME
  [ -z $DOCKER_HOST ] || echo $DOCKER_HOST > $CONFIG_PATH/$ENV_NAME/DOCKER_HOST
  [ -z $TLSKEY ] || cp $TLSKEY $CONFIG_PATH/$ENV_NAME/key.pem
  [ -z $TLSCERT ] || cp $TLSCERT $CONFIG_PATH/$ENV_NAME/cert.pem
  [ -z $CACERT ] || cp $CACERT $CONFIG_PATH/$ENV_NAME/ca.pem
  [ -z $VERSION ] || download_client $CONFIG_PATH/$HOST/docker $VERSION
  chmod -R og-rw $CONFIG_PATH/$ENV_NAME
}

# Usage
#   $1: environment name
function update_env {
  local ENV_NAME=
  local VERSION=
  while [[ $# > 0 ]]; do
	case $1 in
    --version|-v)
	  shift
	  VERSION=$1
	  ;;

	*)
	  if [ -z $ENV_NAME ]; then
	    ENV_NAME=$1
      else
		echo "Invalid option $1" >&2
        help
   	  fi
	  ;;
	esac
    shift # past argument or value
  done

  if [ -z $ENV_NAME ]; then
    echo "Environment name not specified" >&2
    help
  fi
  if [ ! -d $CONFIG_PATH/$ENV_NAME ]; then
    echo "Environment '$ENV_NAME' does not exist" >&2
    help
  fi

  if [ -z VERSION ]; then
	rm -f $CONFIG_PATH/$ENV_NAME/docker
  else
    download_client $CONFIG_PATH/$ENV_NAME/docker $VERSION
  fi 
}

# Usage
#   $1: environment name
function rm_env {
  verify_environment $1
  rm -rf $CONFIG_PATH/$1
}

if [[ $# == 0 ]]; then
  clear_env
else case $1 in
--reset)
  clear_env
  ;;
  
--list|-l)
  list_envs
  ;;

--add|-a)
  shift
  add_env "$@"
  ;;

--update|-u)
  shift
  update_env "$@"
  ;;

--rm|-r)
  delete_env $2
  ;;

--help|-h)
  help
  ;;

-*)
  echo "Invalid function $1" >&2
  help
  ;;

*)
  if [[ $# == 1 ]]; then
    setup $1
  else
    shift
    run_docker "$@"
  fi
  ;;
esac fi
